// Задача 2 - из двух чисел найти минимальное и максимальное

Console.Write("Enter the first any integer:");

int number1 = Convert.ToInt32(Console.ReadLine());

Console.Write("Enter the second any integer:");

int number2 = Convert.ToInt32(Console.ReadLine());

if (number1 > number2)
{
    Console.WriteLine($"The first number {number1} is MAX");
    Console.WriteLine($"The second number {number2} is MIN");
}
else
{
    Console.WriteLine($"The second number {number2} is MAX");
    Console.WriteLine($"The first number {number1} is MIN");
}



// Задача 4 - из трех чисел найти максимальное

Console.Write("Enter the first any integer and press Enter:");

int number1 = Convert.ToInt32(Console.ReadLine());

Console.Write("Enter the second any integer and press Enter:");

int number2 = Convert.ToInt32(Console.ReadLine());

Console.Write("Enter the third any integer and press Enter:");

int number3 = Convert.ToInt32(Console.ReadLine());

int max = 0;

if (number1 > number2)
{
    max = number1;
    if (number3 > number1)
    {
        max = number3;
        Console.WriteLine($"The number {max} is MAX");
    }
    else
    {
        Console.WriteLine($"The number {max} is MAX");
    }
}
else
{
    if (number3 > number2)
    {
        max = number3;
        Console.WriteLine($"The number {max} is MAX");
    }
    else
    {
        max = number2;
        Console.WriteLine($"The number {max} is MAX");
    }
}



// Задача 6 - определение четности или нечетности введенного числа.

Console.Write("Enter the any integer and press Enter:");

double number = Convert.ToInt32(Console.ReadLine());

double result = number % 2;

if (result == 0)
{
    Console.WriteLine($"Nuber {number} is even number");
}
else
{

    Console.WriteLine($"Nuber {number} is not even number");
}



// Задача - найти наибольшую цифру в двухзнвчном числе.

int num = new Random().Next(10, 100);
Console.WriteLine($"Сгенерировано случайное число {num}");
int max = num / 10;
if (num % 10 > max) max = num % 10;
Console.WriteLine($"Наибольшая цифра в этом числе это {max}");



// Задача - в трехзначном числе исключить из него среднюю (вторую справа / слева) цифру и записать полученное число. 

int numA = new Random().Next(100, 1000);
Console.WriteLine($"Ваше число {numA}");
int d = numA % 10;
int n = numA / 100;
Console.WriteLine($"{n}{d}");



// Задача - определить является ли второе число кратным первому

Console.WriteLine("Enter two numbers:");
int n1 = Convert.ToInt32(Console.ReadLine());
int n2 = Convert.ToInt32(Console.ReadLine());

if (n2 % n1 == 0) Console.WriteLine("The second number is a multiple of the first.");
else
{
    Console.WriteLine("The second number is NOT a multiple of the first.");
    int r = n2 % n1;
    Console.WriteLine($"The residue  is {r}");
}



// Задача - проверить делиться ли заданное число сразу на 4 и 6 без остатка.

Console.WriteLine("Введите целое число:");
int num = Convert.ToInt32(Console.ReadLine());

if (num % 4 == 0 && num % 6 == 0) Console.WriteLine("Введенное число делится без остатка на 4 и 6");
else Console.WriteLine("Введенное число НЕ делится без остатка на 4 и 6");



// Задача - определить третью цифру слева в любом произвольном заданном целом числе.

Console.WriteLine("Enter any number:");
int number = Convert.ToInt32(Console.ReadLine());

if (number > 99) // условие проверяет, что число является трехзначным и искомая цифра в нем присутствует
{
    double x = Math.Floor(Math.Log10(number)) + 1; // определение сколько десятичных разрядов имеет введенное число через применение функции Log(10)
    Console.WriteLine($"Введенное число имеет разрядность {x}");
    double y = number / (Math.Pow(10,(x - 3)));  // трансформирует заданное число в аналогичное число, но с сдвинутой запятой целой его части сразу за третьей цифрой слева
    double y1 = (Math.Floor(y));   // это определение целой части числа от трансформированного аналогичного числа
    Console.WriteLine($"Трансформированное число {y1}");
    double z = Math.Floor(y%10);   // здесь производиться нахождение отстатка от деления трансформированного числа на 10 и конвертация его в целое число из вещественного (отброшена дробная часть)
    Console.WriteLine($"Третья цифра слева в веденном числе {z}");
}
else
{
    Console.WriteLine("The desired number is not in this number");
}



// Задача - определить третью цифру слева в любом произвольном заданном целом числе.
//    (решение через цикл)

Console.WriteLine("Enter number");
int Number = Convert.ToInt32(Console.ReadLine());
int CurrentNumber = 0, Remainder = 0;

if (Number > 99)
{
    CurrentNumber = Number;
    while (CurrentNumber >= 1000)
    {
        CurrentNumber /= 10;
        Remainder = CurrentNumber % 10;
    }
    Console.WriteLine($"The third number from the left is {Remainder}");
}
else
{
Console.WriteLine("The thidr number isn't in the number");
}



// Задача - вывести все четные числа от 1 до N

Console.WriteLine("Enter number");
int Number = Convert.ToInt32(Console.ReadLine());
int CurrentNumber = 1;

while (CurrentNumber <= Number)

{
    if (CurrentNumber%2 == 0)
    { 
        Console.Write($"{CurrentNumber}, ");
    }
        CurrentNumber++ ;
}




// Задача - определить вторую цифру в любом произвольном трехзначном заданном целом числе.

Console.WriteLine("Enter number from 1 to 999");
int Number = Convert.ToInt32(Console.ReadLine());
int Remainder = 0;

if (Number > 0 && Number < 1000)
{
    Number /= 10;
    Remainder = Number % 10;

    Console.WriteLine($"The third number from the left is {Remainder}");

}
else
{
    Console.WriteLine("You enter the number is not from 0 to 1000");
}



// Задача - опредедить выходной или рабочий введенный день недели

Console.WriteLine("Enter your number - day of the week");
int NumberDay = Convert.ToInt32(Console.ReadLine());

if (NumberDay == 6 || NumberDay ==7 )
{
Console.WriteLine("This day is wekkend");
}
else
{
Console.WriteLine("This day is not wekkend");
}



// Задача - определить третью цифру слева в любом произвольном заданном целом числе.
//    (решение через цикл)

Console.WriteLine("Enter your number");
int Number = Convert.ToInt32(Console.ReadLine());
int CurrentNumber = Number, Remainder = 0;

if (Number > 99)
{
    if (CurrentNumber > 1000)
    {
    while (CurrentNumber > 1000)
    {
        CurrentNumber /= 10;
        Remainder = CurrentNumber % 10;
    }
    Console.WriteLine($"The third number from the left is {Remainder}");
    }
    else
    Remainder = CurrentNumber % 10;
    Console.WriteLine($"The third number from the left is {Remainder}");
}
else
{
Console.WriteLine("The thidr number isn't in the number");
}



// Задача - Fizz Buzz - массив от 1 до 100, если число делится на 3 - печать Buzz, если на 5 - Fizz, если и на 3 и на 5 - BuzzFizz

int[] arrya = new int[101]; // Создание массива. "101", а не "100", потому, что ячейка с индексом 0 и значением 0 - нас не интересует.

for (int i = 1; i <= 101; i++)  // Заполнение массива от 0 до 100
{
    arrya[i] = i;   // присвоение значения текущему индексу в цикле
    if (i % 15 == 0 || i % 5 == 0 || i % 3 == 0)    // Первый (большой) уровень проверки условия
    {
        if (i % 15 == 0)                            // Второй (средний) уровень проверки условия
        {
            Console.Write("FizzBuzz, ");
        }
        else
        {
            if (i % 5 == 0)                         // Третий (малый) уровень проверки условия
            {
                Console.Write("Buzz, ");
            }
            else
            {
                Console.Write("Fizz, ");            // Единственно возможная альтернатива результата проверки третьего (малого) уровня проверки условий 
            }
        }
    }
    else
    {
        Console.Write($"{i}, ");                    // Если текущее значение не проходит по самому первому (большому) уровню проверки - выводится текущее значение
    }
}



// Задача - программа, считывающая с пользовательского ввода целое число n (неотрицательное), выводящее это число в консоль вместе с правильным образом изменённым словом "программист", для того, чтобы робот мог нормально общаться с людьми, например: 1 программист, 2 программиста, 5 программистов.

Console.WriteLine("Enter your number");
int Number = Convert.ToInt32(Console.ReadLine());
int Remainder100 = 0;
int Remainder10 = 0;

Remainder100 = Number % 100;
Remainder10 = Number % 10;

if (Remainder100 >= 11 && Remainder100 <= 19)
{
    Console.WriteLine($"В комнате {Number} программистов");
}
else
{
    if (Remainder10 >= 5 && Remainder10 <= 9)
    {
        Console.WriteLine($"В комнате {Number} программистов");
    }
    else
    {
        if (Remainder10 >= 2 && Remainder10 <= 4)
        {
            Console.WriteLine($"В комнате {Number} программиста");
        }
        else
        {
            if (Remainder10 == 1)
            {
                Console.WriteLine($"В комнате {Number} программист");
            }
            else
            {
                Console.WriteLine($"В комнате {Number} программистов");
            }

        }
    }
}



// Задача - алгоритм сортировки методом выбора, ещё его называют алгоритм сортировки методом минимакса

int[] arr = {1,5,4,3,2,6,7,1,1};
void PrintArray(int[] array)
{
    int count = array.Length;
    for (int i = 0; i < count; i++)
    {
        Console.Write($"{array[i]} ");
    }
    Console.WriteLine();
}
void SelectionSort(int[] array)
{
    for (int i = 0; i < array.Length - 1; i++)
    {
        int MinPosition = i;
        for (int j = i + 1; j < array.Length; j++)
        {
            if (array[j] < array[MinPosition])
            {
                MinPosition = j;
            }
        }
        int temporary = array[i];
        array[i] = array[MinPosition];
        array[MinPosition] = temporary;
    }
}
PrintArray(arr);
SelectionSort(arr);
PrintArray(arr);



// Задача №17. Напишите программу, которая принимает на вход координаты точки (X и Y), 
// причем X ≠ 0 и Y ≠ 0 и выдаёт номер четверти плоскости, в которой находится эта точка.

Console.WriteLine("Введите координату Х");
int x  = Convert.ToInt32(Console.ReadLine());
Console.WriteLine("Введите координату Y");
int y  = Convert.ToInt32(Console.ReadLine());
CheckKoord(x, y);
// if (x>0 && y>0) Console.WriteLine("Это четверть № 1");
// else if (x>0 && y<0) Console.WriteLine("Это четверть № 4");
// else if (x<0 && y>0) Console.WriteLine("Это четверть № 2");
// else if (x<0 && y<0) Console.WriteLine("Это четверть № 3");
// else Console.WriteLine("Точка находится на оси");

void CheckKoord (int x, int y) // нечего не возвращает, но что-то делает
{
    if (x>0 && y>0) Console.WriteLine("Это четверть № 1");
    else if (x>0 && y<0) Console.WriteLine("Это четверть № 4");
    else if (x<0 && y>0) Console.WriteLine("Это четверть № 2");
    else if (x<0 && y<0) Console.WriteLine("Это четверть № 3");
    else Console.WriteLine("Точка находится на оси");
}



// Задача №18. Напишите программу, которая по заданному номеру четверти,
//показывает диапазон возможных координат точек в этой четверти (x и y).

try // пытаемся выполнить ВЕСЬ программный код
    //Сюда засовываем всю основную программу, ну кроме функций разумеется.
{
    Console.WriteLine("Введите номер четверти");
    int num = Convert.ToInt32(Console.ReadLine());
   
    Console.WriteLine(CheckChetvert(num));
   
}
catch // если же не получилось выполнить всю программу, то уходим в этот блок и информуруем пользователя
{
    Console.WriteLine("Ошибка: Надо было вводить именно целое число цифрами!");
}


// Функция возвращает строку ----------------------------------------------------
string CheckChetvert (int num)
{
    string res;
    if (num == 1)      res = "Введена четверть 1, x > 0 , y >0";
    else if (num == 2) res ="Введена четверть 2, x < 0 , y > 0";
    else if (num == 3) res ="Введена четверть 3, x < 0 , y < 0";
    else if (num == 4) res ="Введена четверть 4, x > 0 , y < 0";
    else               res ="Введен некорректный номер четверти"; 
    return res;
}



// Задача 19 Напишите программу, которая принимает на вход координаты двух точек
// и находит расстояние между ними в 2D пространстве. A (3,6); B (2,1) -> 5,09 A (7,-5); B (1,-1) -> 7,21 

try
{
    Console.WriteLine("Введите координату A, два числа сначала по X далее по Y:");
    int ax = Convert.ToInt32(Console.ReadLine());
    int ay = Convert.ToInt32(Console.ReadLine());
    Console.WriteLine("Введите координату B, два числа сначала по X далее по Y:");
    int bx = Convert.ToInt32(Console.ReadLine());
    int by = Convert.ToInt32(Console.ReadLine());
    
    //double r = distance(ax,ay,bx,by);
    //Console.WriteLine($"Расстояние между точками A и B: {r}");
    Console.WriteLine($"Расстояние между точками A и B: {distance(ax,ay,bx,by)}");

}
catch // если же не получилось выполнить всю программу, то уходим в этот блок и информуруем пользователя
{
    Console.WriteLine("Ошибка: Надо было вводить именно целое число цифрами!");
}

// Функция возвращает число double ----------------------------------------------------

double distance (int ax, int ay, int bx, int by)
{
    double d = Math.Sqrt((ax-bx)*(ax-bx)+(ay-by)*(ay-by));
    return d;
}



// Задача 20 Напишите программу, которая принимает на вход число (N)
// и выдаёт таблицу квадратов чисел от 1 до N. 5 -> 1, 4, 9, 16, 25. 2 -> 1,4 

try // Пытаемся выполнить ВЕСЬ программный код
    // Сюда засовываем всю основную программу, ну кроме функций разумеется.
{
    Console.WriteLine("Введите Число:");
    int n = Convert.ToInt32(Console.ReadLine());

    for (int i=1;i<=n;i++)
    {
        Console.Write($"Квадрат числа {i}: ");
        Console.WriteLine(kvadrat(i));
    }

}
catch // если же не получилось выполнить всю программу, то уходим в этот блок и информуруем пользователя
{
    Console.WriteLine("Ошибка: Надо было вводить именно целое число цифрами!");
}

// Функция возвращает число int ----------------------------------------------------

int kvadrat (int n)
{
    return n*n;
}



// Задача 19 - HARD необязательная.
// Напишите программу, которая принимает на вход целое число любой разрядности и проверяет, является ли оно палиндромом. Через строку нельзя решать само собой.

Console.WriteLine("Введите любое целое положительное число и нажмите Enter:");

try																		// основной блок алгоритма
{
int Number = Convert.ToInt32(Console.ReadLine());

double Size = Math.Floor(Math.Log10(Number)) + 1; 						// определение сколько десятичных разрядов имеет введенное число через применение функции Log(10)

// Console.WriteLine($"Введенное число имеет разрядность {Size}");		// вспомогательная строка использовалась для контроля работы алгоритма

double CountIteration = Math.Floor(Size / 2); 							// определяем количество проверок соотвертсвия внутри числа, через Math.Floor потому,что колличество цифр в числе может быть не четным

double NumberPoint = 1;

for (NumberPoint = 1; NumberPoint <= CountIteration; NumberPoint++)		// цикл для определения сравниваемых цифр в числе
{
	double NumberLeft = Math.Floor((Number / Math.Pow(10 , (Size-NumberPoint)))%10);
	double NumberRight = Math.Floor(((Number / Math.Pow(10, NumberPoint-1)) % 10));
	double Result = (NumberLeft - NumberRight);
	// Console.WriteLine(Result);										// вспомогательная строка использовалась для контроля работы алгоритма
    // double Palindrom(NumberPoint, CountIteration);					// неудачная попытка сделать через метод (функию), не
	if (Result !=0)														// проверка - в случае определения перого же не соответствия сравнивамых цифр - останавливаем дальнейшие проверки, число не палиндром
	{
		//Console.WriteLine("-");
		break;
	}
}

double Result1 = (NumberPoint - CountIteration);						// переменная, проверяющая, что цикл проверки соответствия цифр был пройден полностью, т.е. все сверяемые пары цифр совпали
// Console.WriteLine(Result1);											// вспомогательная строка использовалась для контроля работы алгоритма

if (Result1 == 1)
{
	Console.WriteLine($"Введенное число {Number} - палиндром");
}
else
{
	Console.WriteLine($"Введенное число {Number} - не палиндром");
}
}
catch																	// вспомогательный блок алгоритма для некорректного ввода
{
    Console.WriteLine("Вы ввели некорректное число. Введите целое положительное число.");
}

// double Palindrom (double Result)											// попытка создания метода
// {
//  double NumberLeft = Math.Floor((Number / Math.Pow(10 , (Size-NumberPoint)))%10);
// 	double NumberRight = Math.Floor(((Number / Math.Pow(10, NumberPoint-1)) % 10));
// 	double Result = (NumberLeft - NumberRight);
// 	Console.WriteLine(Result);
// }



// Задача 23 Напишите программу, которая принимает на вход число (N) и выдаёт таблицу кубов чисел от 1 до N.

try                                                                     // основной блок алгоритма
{
    Console.WriteLine("Введите любое положительное целое число:");
    int Number = Convert.ToInt32(Console.ReadLine());

    for (int i=1; i<=Number; i++)
    {
        Console.Write($"Куб числа {i} = ");
        Console.WriteLine(Kube(i));
    }

}
catch                                                                   // блок алгоритма для ошибок
{
    Console.WriteLine("Введенное число не корректно");
}

// Создание функции возвратного типа
int Kube (int n)
{
    return n*n*n;
}



// Задача 21 - HARD необязательная. Напишите программу, которая принимает на вход координаты двух точек и находит расстояние между ними в N-мерном пространстве. Сначала задается N с клавиатуры, потом задаются координаты точек.

try                                                                 // основной блок алгоритма
{
    Console.WriteLine("Введите размерность пространства (N): ");    // определяем размерность пространства
    int N = Convert.ToInt32(Console.ReadLine());

    int[] ArrayA = new int [N];                                     // вводим координаты точки А в виде массива
    for (int i = 0; i < ArrayA.Length; i++)
    {
        Console.WriteLine($"Введите {(i+1)}ую координату точки A");
        ArrayA[i] = Convert.ToInt32(Console.ReadLine());
    }

    int[] ArrayB = new int [N];                                     // вводим координаты точки В в виде массива
    for (int i = 0; i < ArrayB.Length; i++)
    {
        Console.WriteLine($"Введите {(i+1)}ую координату точки B");
        ArrayB[i] = Convert.ToInt32(Console.ReadLine());
    }
    
    int[] ArrayResult = new int [N];                                // формируем массив в результатами - квадратов разницы соответствующих координат двух точек
    for (int i = 0; i < ArrayResult.Length; i++)
    {
        ArrayResult[i] = ((ArrayA[i]-ArrayB[i]) * (ArrayA[i]-ArrayB[i]));
    }
    int SumArrayResult = 0;                                         // определяем сумму всех элементов итогового (результирующего) массива
    Array.ForEach(ArrayResult, i => SumArrayResult += i);
    // Console.WriteLine(SumArrayResult);                           // вспомогательная строка для контроля работы алгоритма

    double Distance = Math.Sqrt(SumArrayResult);                    // расчитываем дистанцию между точками через извлечение квадратного корня из суммы всех элементов результирующего массива
    Console.WriteLine($"Расстояние между точками составляет {Distance} ед.");
}

catch                                                               // блок алгоритма на случай ошибок в основном блоке
{
    Console.WriteLine("Ошибка: проверьте корректность введенных данных.");
}



// Задача 24: Напишите программу, которая принимает на вход число (А) и выдаёт сумму чисел от 1 до А.
// 7 -> 28
// 4 -> 10

Console.WriteLine("Введите целое число");
int num = Convert.ToInt32(Console.ReadLine());
Console.WriteLine($"Сумма чисел от 1 до {num} равна {Summa(num)}");


int Summa(int num)
{
    int sum=0;
    for (int i=1;i<=num;i++)  sum+=i;
    return sum;
}



// Задача 30: Напишите программу, которая выводит массив из 8 элементов, заполненный нулями и единицами в случайном порядке. [1,0,1,1,0,1,0,0] 
// Далее обернуть всё это в функцию, конечно же , здесь нужна функция которая красиво выводит массив через запятую, создать функцию булевого типа , которая определяет больше ли 1 чем 0 в массиве 
 
int[] array = new int[8]; 
for (int i = 0; i < 8; i++) 
    array[i] = new Random().Next(0, 2); 
PrintArray(array); 
if (Check1(array)) 
    Console.WriteLine("Единиц больше, чем нулей!"); 
else    Console.WriteLine("Нулей не меньше, чем единиц!"); 
 
void PrintArray(int[] a) 
{ 
    for (int i = 0; i < a.Length - 1; i++) 
        Console.Write($"{a[i]}, "); 
    Console.WriteLine($"{a[^1]}"); 
} 
 
 
 
bool Check1(int[] a) 
{ 
    int sum = 0; 
    for (int i = 0; i < a.Length; i++) 
    { 
        sum = sum + a[i]; 
    } 
    if (sum > a.Length / 2) 
        return true; 
    else return false; 
}



// Задача 25: Напишите цикл, который принимает на вход два числа (A и B) и возводит число A в натуральную степень B.

Console.Write("Введите число, возводимое в степень: ");
int X = Convert.ToInt32(Console.ReadLine());

Console.Write("Введите число, равное значению степени: ");
int Y = Convert.ToInt32(Console.ReadLine());

int R = X;
try                                                         // основной блок алгоритма
{
Degree(X, Y);                                               // вызов функции возведения числа X в степень Y
PrintResult(X, Y, R);                                       // вызов функции вывода на экран результата вычислений
}
catch                                                       // блок алгоритма на случай возникновения ошибок
{
    Console.WriteLine("Ошибка. Пожалуйста проверьте корректность введенных данных.");
}

                                                            // блок функций
int Degree(int A, int B)                                    // функция возведения числа А в степень В
{
    for (int i = 1; i < B; i++)
    {
        R = R * A;
    }
    return R;
}

void PrintResult(int A, int B, int R)                       // функция печати результата вычислений
{
    Console.WriteLine();
    Console.WriteLine($"Ваш результат - число {A} в степени {B} = {R}");
    Console.WriteLine();
}



// Задача 27: Напишите программу, которая принимает на вход число и выдаёт сумму цифр в числе. Через строку решать нельзя.
// 452 -> 11
// 82 -> 10
// 9012 -> 12


Console.WriteLine("Enter your number");
double Number = Convert.ToDouble(Console.ReadLine());

double NumberSize = Math.Floor(Math.Log10(Number)) + 1; 	    // определение размерности (длинны) числа

//Console.WriteLine($"Size = {NumberSize}");									// вспомогательная строка использовалась для контроля работы алгоритма
double NumSum = 0;
double NumberTemp = 0;
Remaider(Number);

Console.WriteLine($"NumSum = {NumSum}");	

// double NumberRemaider = 0;


// for (int i = 1; i <= NumberSize; i++)
// {
//     //NumberRemaider = NumberTemp %10;
//     //double NumberTemp = NumberTemp / 10;
//     double NumberTemp = Math.Floor((NumberTemp / Math.Pow(10 , (i)))%10);
//     // double SumNumber = SumNumber + NumberTemp;
//     Console.WriteLine($"{i}, {NumberTemp}");									// вспомогательная строка использовалась для контроля работы алгоритма
// }

double Remaider(double A)                                    // функция возведения числа А в степень В
{
    for (int i = 0; i < NumberSize; i++)
    {
    NumberTemp = Math.Floor((A / Math.Pow(10 , (i)))%10);
    NumSum = NumSum + NumberTemp;
    Console.WriteLine($"{i} / {NumberTemp} /{NumSum}");
    }
    // NumberTemp = A % 10;
    // NumSum = NumSum + NumberTemp;
    return NumSum;
}