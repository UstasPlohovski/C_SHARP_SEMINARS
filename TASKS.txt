// Задача 2 - из двух чисел найти минимальное и максимальное

Console.Write("Enter the first any integer:");

int number1 = Convert.ToInt32(Console.ReadLine());

Console.Write("Enter the second any integer:");

int number2 = Convert.ToInt32(Console.ReadLine());

if (number1 > number2)
{
    Console.WriteLine($"The first number {number1} is MAX");
    Console.WriteLine($"The second number {number2} is MIN");
}
else
{
    Console.WriteLine($"The second number {number2} is MAX");
    Console.WriteLine($"The first number {number1} is MIN");
}



// Задача 4 - из трех чисел найти максимальное

Console.Write("Enter the first any integer and press Enter:");

int number1 = Convert.ToInt32(Console.ReadLine());

Console.Write("Enter the second any integer and press Enter:");

int number2 = Convert.ToInt32(Console.ReadLine());

Console.Write("Enter the third any integer and press Enter:");

int number3 = Convert.ToInt32(Console.ReadLine());

int max = 0;

if (number1 > number2)
{
    max = number1;
    if (number3 > number1)
    {
        max = number3;
        Console.WriteLine($"The number {max} is MAX");
    }
    else
    {
        Console.WriteLine($"The number {max} is MAX");
    }
}
else
{
    if (number3 > number2)
    {
        max = number3;
        Console.WriteLine($"The number {max} is MAX");
    }
    else
    {
        max = number2;
        Console.WriteLine($"The number {max} is MAX");
    }
}



// Задача 6 - определение четности или нечетности введенного числа.

Console.Write("Enter the any integer and press Enter:");

double number = Convert.ToInt32(Console.ReadLine());

double result = number % 2;

if (result == 0)
{
    Console.WriteLine($"Nuber {number} is even number");
}
else
{

    Console.WriteLine($"Nuber {number} is not even number");
}



// Задача - найти наибольшую цифру в двухзнвчном числе.

int num = new Random().Next(10, 100);
Console.WriteLine($"Сгенерировано случайное число {num}");
int max = num / 10;
if (num % 10 > max) max = num % 10;
Console.WriteLine($"Наибольшая цифра в этом числе это {max}");



// Задача - в трехзначном числе исключить из него среднюю (вторую справа / слева) цифру и записать полученное число. 

int numA = new Random().Next(100, 1000);
Console.WriteLine($"Ваше число {numA}");
int d = numA % 10;
int n = numA / 100;
Console.WriteLine($"{n}{d}");



// Задача - определить является ли второе число кратным первому

Console.WriteLine("Enter two numbers:");
int n1 = Convert.ToInt32(Console.ReadLine());
int n2 = Convert.ToInt32(Console.ReadLine());

if (n2 % n1 == 0) Console.WriteLine("The second number is a multiple of the first.");
else
{
    Console.WriteLine("The second number is NOT a multiple of the first.");
    int r = n2 % n1;
    Console.WriteLine($"The residue  is {r}");
}



// Задача - проверить делиться ли заданное число сразу на 4 и 6 без остатка.

Console.WriteLine("Введите целое число:");
int num = Convert.ToInt32(Console.ReadLine());

if (num % 4 == 0 && num % 6 == 0) Console.WriteLine("Введенное число делится без остатка на 4 и 6");
else Console.WriteLine("Введенное число НЕ делится без остатка на 4 и 6");



// Задача - определить третью цифру слева в любом произвольном заданном целом числе.

Console.WriteLine("Enter any number:");
int number = Convert.ToInt32(Console.ReadLine());

if (number > 99) // условие проверяет, что число является трехзначным и искомая цифра в нем присутствует
{
    double x = Math.Floor(Math.Log10(number)) + 1; // определение сколько десятичных разрядов имеет введенное число через применение функции Log(10)
    Console.WriteLine($"Введенное число имеет разрядность {x}");
    double y = number / (Math.Pow(10,(x - 3)));  // трансформирует заданное число в аналогичное число, но с сдвинутой запятой целой его части сразу за третьей цифрой слева
    double y1 = (Math.Floor(y));   // это определение целой части числа от трансформированного аналогичного числа
    Console.WriteLine($"Трансформированное число {y1}");
    double z = Math.Floor(y%10);   // здесь производиться нахождение отстатка от деления трансформированного числа на 10 и конвертация его в целое число из вещественного (отброшена дробная часть)
    Console.WriteLine($"Третья цифра слева в веденном числе {z}");
}
else
{
    Console.WriteLine("The desired number is not in this number");
}



// Задача - определить третью цифру слева в любом произвольном заданном целом числе.
//    (решение через цикл)

Console.WriteLine("Enter number");
int Number = Convert.ToInt32(Console.ReadLine());
int CurrentNumber = 0, Remainder = 0;

if (Number > 99)
{
    CurrentNumber = Number;
    while (CurrentNumber >= 1000)
    {
        CurrentNumber /= 10;
        Remainder = CurrentNumber % 10;
    }
    Console.WriteLine($"The third number from the left is {Remainder}");
}
else
{
Console.WriteLine("The thidr number isn't in the number");
}



// Задача - вывести все четные числа от 1 до N

Console.WriteLine("Enter number");
int Number = Convert.ToInt32(Console.ReadLine());
int CurrentNumber = 1;

while (CurrentNumber <= Number)

{
    if (CurrentNumber%2 == 0)
    { 
        Console.Write($"{CurrentNumber}, ");
    }
        CurrentNumber++ ;
}




// Задача - определить вторую цифру в любом произвольном трехзначном заданном целом числе.

Console.WriteLine("Enter number from 1 to 999");
int Number = Convert.ToInt32(Console.ReadLine());
int Remainder = 0;

if (Number > 0 && Number < 1000)
{
    Number /= 10;
    Remainder = Number % 10;

    Console.WriteLine($"The third number from the left is {Remainder}");

}
else
{
    Console.WriteLine("You enter the number is not from 0 to 1000");
}



// Задача - опредедить выходной или рабочий введенный день недели

Console.WriteLine("Enter your number - day of the week");
int NumberDay = Convert.ToInt32(Console.ReadLine());

if (NumberDay == 6 || NumberDay ==7 )
{
Console.WriteLine("This day is wekkend");
}
else
{
Console.WriteLine("This day is not wekkend");
}



// Задача - определить третью цифру слева в любом произвольном заданном целом числе.
//    (решение через цикл)

Console.WriteLine("Enter your number");
int Number = Convert.ToInt32(Console.ReadLine());
int CurrentNumber = Number, Remainder = 0;

if (Number > 99)
{
    if (CurrentNumber > 1000)
    {
    while (CurrentNumber > 1000)
    {
        CurrentNumber /= 10;
        Remainder = CurrentNumber % 10;
    }
    Console.WriteLine($"The third number from the left is {Remainder}");
    }
    else
    Remainder = CurrentNumber % 10;
    Console.WriteLine($"The third number from the left is {Remainder}");
}
else
{
Console.WriteLine("The thidr number isn't in the number");
}



// Задача - Fizz Buzz - массив от 1 до 100, если число делится на 3 - печать Buzz, если на 5 - Fizz, если и на 3 и на 5 - BuzzFizz

int[] arrya = new int[101]; // Создание массива. "101", а не "100", потому, что ячейка с индексом 0 и значением 0 - нас не интересует.

for (int i = 1; i <= 101; i++)  // Заполнение массива от 0 до 100
{
    arrya[i] = i;   // присвоение значения текущему индексу в цикле
    if (i % 15 == 0 || i % 5 == 0 || i % 3 == 0)    // Первый (большой) уровень проверки условия
    {
        if (i % 15 == 0)                            // Второй (средний) уровень проверки условия
        {
            Console.Write("FizzBuzz, ");
        }
        else
        {
            if (i % 5 == 0)                         // Третий (малый) уровень проверки условия
            {
                Console.Write("Buzz, ");
            }
            else
            {
                Console.Write("Fizz, ");            // Единственно возможная альтернатива результата проверки третьего (малого) уровня проверки условий 
            }
        }
    }
    else
    {
        Console.Write($"{i}, ");                    // Если текущее значение не проходит по самому первому (большому) уровню проверки - выводится текущее значение
    }
}



// Задача - программа, считывающая с пользовательского ввода целое число n (неотрицательное), выводящее это число в консоль вместе с правильным образом изменённым словом "программист", для того, чтобы робот мог нормально общаться с людьми, например: 1 программист, 2 программиста, 5 программистов.

Console.WriteLine("Enter your number");
int Number = Convert.ToInt32(Console.ReadLine());
int Remainder100 = 0;
int Remainder10 = 0;

Remainder100 = Number % 100;
Remainder10 = Number % 10;

if (Remainder100 >= 11 && Remainder100 <= 19)
{
    Console.WriteLine($"В комнате {Number} программистов");
}
else
{
    if (Remainder10 >= 5 && Remainder10 <= 9)
    {
        Console.WriteLine($"В комнате {Number} программистов");
    }
    else
    {
        if (Remainder10 >= 2 && Remainder10 <= 4)
        {
            Console.WriteLine($"В комнате {Number} программиста");
        }
        else
        {
            if (Remainder10 == 1)
            {
                Console.WriteLine($"В комнате {Number} программист");
            }
            else
            {
                Console.WriteLine($"В комнате {Number} программистов");
            }

        }
    }
}



// Задача - алгоритм сортировки методом выбора, ещё его называют алгоритм сортировки методом минимакса

int[] arr = {1,5,4,3,2,6,7,1,1};
void PrintArray(int[] array)
{
    int count = array.Length;
    for (int i = 0; i < count; i++)
    {
        Console.Write($"{array[i]} ");
    }
    Console.WriteLine();
}
void SelectionSort(int[] array)
{
    for (int i = 0; i < array.Length - 1; i++)
    {
        int MinPosition = i;
        for (int j = i + 1; j < array.Length; j++)
        {
            if (array[j] < array[MinPosition])
            {
                MinPosition = j;
            }
        }
        int temporary = array[i];
        array[i] = array[MinPosition];
        array[MinPosition] = temporary;
    }
}
PrintArray(arr);
SelectionSort(arr);
PrintArray(arr);



// Задача №17. Напишите программу, которая принимает на вход координаты точки (X и Y), 
// причем X ≠ 0 и Y ≠ 0 и выдаёт номер четверти плоскости, в которой находится эта точка.

Console.WriteLine("Введите координату Х");
int x  = Convert.ToInt32(Console.ReadLine());
Console.WriteLine("Введите координату Y");
int y  = Convert.ToInt32(Console.ReadLine());
CheckKoord(x, y);
// if (x>0 && y>0) Console.WriteLine("Это четверть № 1");
// else if (x>0 && y<0) Console.WriteLine("Это четверть № 4");
// else if (x<0 && y>0) Console.WriteLine("Это четверть № 2");
// else if (x<0 && y<0) Console.WriteLine("Это четверть № 3");
// else Console.WriteLine("Точка находится на оси");

void CheckKoord (int x, int y) // нечего не возвращает, но что-то делает
{
    if (x>0 && y>0) Console.WriteLine("Это четверть № 1");
    else if (x>0 && y<0) Console.WriteLine("Это четверть № 4");
    else if (x<0 && y>0) Console.WriteLine("Это четверть № 2");
    else if (x<0 && y<0) Console.WriteLine("Это четверть № 3");
    else Console.WriteLine("Точка находится на оси");
}



// Задача №18. Напишите программу, которая по заданному номеру четверти,
//показывает диапазон возможных координат точек в этой четверти (x и y).

try // пытаемся выполнить ВЕСЬ программный код
    //Сюда засовываем всю основную программу, ну кроме функций разумеется.
{
    Console.WriteLine("Введите номер четверти");
    int num = Convert.ToInt32(Console.ReadLine());
   
    Console.WriteLine(CheckChetvert(num));
   
}
catch // если же не получилось выполнить всю программу, то уходим в этот блок и информуруем пользователя
{
    Console.WriteLine("Ошибка: Надо было вводить именно целое число цифрами!");
}


// Функция возвращает строку ----------------------------------------------------
string CheckChetvert (int num)
{
    string res;
    if (num == 1)      res = "Введена четверть 1, x > 0 , y >0";
    else if (num == 2) res ="Введена четверть 2, x < 0 , y > 0";
    else if (num == 3) res ="Введена четверть 3, x < 0 , y < 0";
    else if (num == 4) res ="Введена четверть 4, x > 0 , y < 0";
    else               res ="Введен некорректный номер четверти"; 
    return res;
}



// Задача 19 Напишите программу, которая принимает на вход координаты двух точек
// и находит расстояние между ними в 2D пространстве. A (3,6); B (2,1) -> 5,09 A (7,-5); B (1,-1) -> 7,21 

try
{
    Console.WriteLine("Введите координату A, два числа сначала по X далее по Y:");
    int ax = Convert.ToInt32(Console.ReadLine());
    int ay = Convert.ToInt32(Console.ReadLine());
    Console.WriteLine("Введите координату B, два числа сначала по X далее по Y:");
    int bx = Convert.ToInt32(Console.ReadLine());
    int by = Convert.ToInt32(Console.ReadLine());
    
    //double r = distance(ax,ay,bx,by);
    //Console.WriteLine($"Расстояние между точками A и B: {r}");
    Console.WriteLine($"Расстояние между точками A и B: {distance(ax,ay,bx,by)}");

}
catch // если же не получилось выполнить всю программу, то уходим в этот блок и информуруем пользователя
{
    Console.WriteLine("Ошибка: Надо было вводить именно целое число цифрами!");
}

// Функция возвращает число double ----------------------------------------------------

double distance (int ax, int ay, int bx, int by)
{
    double d = Math.Sqrt((ax-bx)*(ax-bx)+(ay-by)*(ay-by));
    return d;
}



// Задача 20 Напишите программу, которая принимает на вход число (N)
// и выдаёт таблицу квадратов чисел от 1 до N. 5 -> 1, 4, 9, 16, 25. 2 -> 1,4 

try // Пытаемся выполнить ВЕСЬ программный код
    // Сюда засовываем всю основную программу, ну кроме функций разумеется.
{
    Console.WriteLine("Введите Число:");
    int n = Convert.ToInt32(Console.ReadLine());

    for (int i=1;i<=n;i++)
    {
        Console.Write($"Квадрат числа {i}: ");
        Console.WriteLine(kvadrat(i));
    }

}
catch // если же не получилось выполнить всю программу, то уходим в этот блок и информуруем пользователя
{
    Console.WriteLine("Ошибка: Надо было вводить именно целое число цифрами!");
}

// Функция возвращает число int ----------------------------------------------------

int kvadrat (int n)
{
    return n*n;
}



// Задача 19 - HARD необязательная.
// Напишите программу, которая принимает на вход целое число любой разрядности и проверяет, является ли оно палиндромом. Через строку нельзя решать само собой.

Console.WriteLine("Введите любое целое положительное число и нажмите Enter:");

try																		// основной блок алгоритма
{
int Number = Convert.ToInt32(Console.ReadLine());

double Size = Math.Floor(Math.Log10(Number)) + 1; 						// определение сколько десятичных разрядов имеет введенное число через применение функции Log(10)

// Console.WriteLine($"Введенное число имеет разрядность {Size}");		// вспомогательная строка использовалась для контроля работы алгоритма

double CountIteration = Math.Floor(Size / 2); 							// определяем количество проверок соотвертсвия внутри числа, через Math.Floor потому,что колличество цифр в числе может быть не четным

double NumberPoint = 1;

for (NumberPoint = 1; NumberPoint <= CountIteration; NumberPoint++)		// цикл для определения сравниваемых цифр в числе
{
	double NumberLeft = Math.Floor((Number / Math.Pow(10 , (Size-NumberPoint)))%10);
	double NumberRight = Math.Floor(((Number / Math.Pow(10, NumberPoint-1)) % 10));
	double Result = (NumberLeft - NumberRight);
	// Console.WriteLine(Result);										// вспомогательная строка использовалась для контроля работы алгоритма
    // double Palindrom(NumberPoint, CountIteration);					// неудачная попытка сделать через метод (функию), не
	if (Result !=0)														// проверка - в случае определения перого же не соответствия сравнивамых цифр - останавливаем дальнейшие проверки, число не палиндром
	{
		//Console.WriteLine("-");
		break;
	}
}

double Result1 = (NumberPoint - CountIteration);						// переменная, проверяющая, что цикл проверки соответствия цифр был пройден полностью, т.е. все сверяемые пары цифр совпали
// Console.WriteLine(Result1);											// вспомогательная строка использовалась для контроля работы алгоритма

if (Result1 == 1)
{
	Console.WriteLine($"Введенное число {Number} - палиндром");
}
else
{
	Console.WriteLine($"Введенное число {Number} - не палиндром");
}
}
catch																	// вспомогательный блок алгоритма для некорректного ввода
{
    Console.WriteLine("Вы ввели некорректное число. Введите целое положительное число.");
}

// double Palindrom (double Result)											// попытка создания метода
// {
//  double NumberLeft = Math.Floor((Number / Math.Pow(10 , (Size-NumberPoint)))%10);
// 	double NumberRight = Math.Floor(((Number / Math.Pow(10, NumberPoint-1)) % 10));
// 	double Result = (NumberLeft - NumberRight);
// 	Console.WriteLine(Result);
// }



// Задача 23 Напишите программу, которая принимает на вход число (N) и выдаёт таблицу кубов чисел от 1 до N.

try                                                                     // основной блок алгоритма
{
    Console.WriteLine("Введите любое положительное целое число:");
    int Number = Convert.ToInt32(Console.ReadLine());

    for (int i=1; i<=Number; i++)
    {
        Console.Write($"Куб числа {i} = ");
        Console.WriteLine(Kube(i));
    }

}
catch                                                                   // блок алгоритма для ошибок
{
    Console.WriteLine("Введенное число не корректно");
}

// Создание функции возвратного типа
int Kube (int n)
{
    return n*n*n;
}



// Задача 21 - HARD необязательная. Напишите программу, которая принимает на вход координаты двух точек и находит расстояние между ними в N-мерном пространстве. Сначала задается N с клавиатуры, потом задаются координаты точек.

try                                                                 // основной блок алгоритма
{
    Console.WriteLine("Введите размерность пространства (N): ");    // определяем размерность пространства
    int N = Convert.ToInt32(Console.ReadLine());

    int[] ArrayA = new int [N];                                     // вводим координаты точки А в виде массива
    for (int i = 0; i < ArrayA.Length; i++)
    {
        Console.WriteLine($"Введите {(i+1)}ую координату точки A");
        ArrayA[i] = Convert.ToInt32(Console.ReadLine());
    }

    int[] ArrayB = new int [N];                                     // вводим координаты точки В в виде массива
    for (int i = 0; i < ArrayB.Length; i++)
    {
        Console.WriteLine($"Введите {(i+1)}ую координату точки B");
        ArrayB[i] = Convert.ToInt32(Console.ReadLine());
    }
    
    int[] ArrayResult = new int [N];                                // формируем массив в результатами - квадратов разницы соответствующих координат двух точек
    for (int i = 0; i < ArrayResult.Length; i++)
    {
        ArrayResult[i] = ((ArrayA[i]-ArrayB[i]) * (ArrayA[i]-ArrayB[i]));
    }
    int SumArrayResult = 0;                                         // определяем сумму всех элементов итогового (результирующего) массива
    Array.ForEach(ArrayResult, i => SumArrayResult += i);
    // Console.WriteLine(SumArrayResult);                           // вспомогательная строка для контроля работы алгоритма

    double Distance = Math.Sqrt(SumArrayResult);                    // расчитываем дистанцию между точками через извлечение квадратного корня из суммы всех элементов результирующего массива
    Console.WriteLine($"Расстояние между точками составляет {Distance} ед.");
}

catch                                                               // блок алгоритма на случай ошибок в основном блоке
{
    Console.WriteLine("Ошибка: проверьте корректность введенных данных.");
}



// Задача 24: Напишите программу, которая принимает на вход число (А) и выдаёт сумму чисел от 1 до А.
// 7 -> 28
// 4 -> 10

Console.WriteLine("Введите целое число");
int num = Convert.ToInt32(Console.ReadLine());
Console.WriteLine($"Сумма чисел от 1 до {num} равна {Summa(num)}");


int Summa(int num)
{
    int sum=0;
    for (int i=1;i<=num;i++)  sum+=i;
    return sum;
}



// Задача 30: Напишите программу, которая выводит массив из 8 элементов, заполненный нулями и единицами в случайном порядке. [1,0,1,1,0,1,0,0] 
// Далее обернуть всё это в функцию, конечно же , здесь нужна функция которая красиво выводит массив через запятую, создать функцию булевого типа , которая определяет больше ли 1 чем 0 в массиве 
 
int[] array = new int[8]; 
for (int i = 0; i < 8; i++) 
    array[i] = new Random().Next(0, 2); 
PrintArray(array); 
if (Check1(array)) 
    Console.WriteLine("Единиц больше, чем нулей!"); 
else    Console.WriteLine("Нулей не меньше, чем единиц!"); 
 
void PrintArray(int[] a) 
{ 
    for (int i = 0; i < a.Length - 1; i++) 
        Console.Write($"{a[i]}, "); 
    Console.WriteLine($"{a[^1]}"); 
} 
 
 
 
bool Check1(int[] a) 
{ 
    int sum = 0; 
    for (int i = 0; i < a.Length; i++) 
    { 
        sum = sum + a[i]; 
    } 
    if (sum > a.Length / 2) 
        return true; 
    else return false; 
}



// Задача 25: Напишите цикл, который принимает на вход два числа (A и B) и возводит число A в натуральную степень B.

Console.Write("Введите число, возводимое в степень: ");
int X = Convert.ToInt32(Console.ReadLine());

Console.Write("Введите число, равное значению степени: ");
int Y = Convert.ToInt32(Console.ReadLine());

int R = X;
try                                                         // основной блок алгоритма
{
Degree(X, Y);                                               // вызов функции возведения числа X в степень Y
PrintResult(X, Y, R);                                       // вызов функции вывода на экран результата вычислений
}
catch                                                       // блок алгоритма на случай возникновения ошибок
{
    Console.WriteLine("Ошибка. Пожалуйста проверьте корректность введенных данных.");
}

                                                            // блок функций
int Degree(int A, int B)                                    // функция возведения числа А в степень В
{
    for (int i = 1; i < B; i++)
    {
        R = R * A;
    }
    return R;
}

void PrintResult(int A, int B, int R)                       // функция печати результата вычислений
{
    Console.WriteLine();
    Console.WriteLine($"Ваш результат - число {A} в степени {B} = {R}");
    Console.WriteLine();
}



// Задача 27: Напишите программу, которая принимает на вход число и выдаёт сумму цифр в числе. Через строку решать нельзя.
// 452 -> 11
// 82 -> 10
// 9012 -> 12


Console.WriteLine("Enter your number");
double Number = Convert.ToDouble(Console.ReadLine());

double NumberSize = Math.Floor(Math.Log10(Number)) + 1; 	    // определение размерности (длинны) числа

//Console.WriteLine($"Size = {NumberSize}");									// вспомогательная строка использовалась для контроля работы алгоритма
double NumSum = 0;
double NumberTemp = 0;
Remaider(Number);

Console.WriteLine($"NumSum = {NumSum}");	

// double NumberRemaider = 0;


// for (int i = 1; i <= NumberSize; i++)
// {
//     //NumberRemaider = NumberTemp %10;
//     //double NumberTemp = NumberTemp / 10;
//     double NumberTemp = Math.Floor((NumberTemp / Math.Pow(10 , (i)))%10);
//     // double SumNumber = SumNumber + NumberTemp;
//     Console.WriteLine($"{i}, {NumberTemp}");									// вспомогательная строка использовалась для контроля работы алгоритма
// }

double Remaider(double A)                                    // функция возведения числа А в степень В
{
    for (int i = 0; i < NumberSize; i++)
    {
    NumberTemp = Math.Floor((A / Math.Pow(10 , (i)))%10);
    NumSum = NumSum + NumberTemp;
    Console.WriteLine($"{i} / {NumberTemp} /{NumSum}");
    }
    // NumberTemp = A % 10;
    // NumSum = NumSum + NumberTemp;
    return NumSum;
}



// Задача 29: Напишите программу, которая задаёт массив из 8 целых чисел с клавиатуры и далее выводит массив на экран в одну строку.
// (с выделением функций)

Console.WriteLine("Введите размер массива (N): ");                  // определяем размер массива
int N = Convert.ToInt32(Console.ReadLine());

int [] Array1 = ReadArray1(N);                                      // вызов функции заполнения массива
Console.WriteLine();
WriteArray1(Array1);                                                // вызов функции печати массива

// Функции:

int[] ReadArray1(int N)                                             // функция заполнения массива
{
    int[] Array1 = new int[N];
    for (int i = 0; i < Array1.Length; i++)
    {
        Console.WriteLine($"Введите значение {i}-го индекса массива");
        Array1[i] = Convert.ToInt32(Console.ReadLine());
    }
    return Array1;
}

void WriteArray1(int[] Array1)                                      // функция печати массива
{
    Console.Write("You have new array; [");
    for (int i = 0; i < (Array1.Length - 1); i++)
    {
        Console.Write($"{Array1[i]}; ");
    }
    Console.Write($"{Array1[^1]}]");
}



// Задача 34: Задайте массив заполненный случайными положительными трёхзначными числами. Напишите программу, которая покажет количество чётных чисел в массиве.
// [345, 897, 568, 234] -> 2

int N = new Random().Next(8, 16);                                           // определяем случайный размер массива
Console.WriteLine();
Console.Write($"Определен случайный размер массива (N): {N}");              // от 9 до 15 (крайние значения в случайной выборке не берутся)
int[] Array1 = ReadArray1(N);                                               // функция заполнения массива
WriteArray1(Array1);                                                        // функция печати массива

int CountEvent = CheckForEvent(Array1);                                     // функия проверки числа на четность и суммирования их (четных) количества
Console.WriteLine($"Колличество четных чисел в данном массиве: {CountEvent}");
Console.WriteLine();


// Функции:

int[] ReadArray1(int N)                                                     // функция заполнения массива
{
    int[] Array1 = new int[N];
    for (int i = 0; i < Array1.Length; i++)
    {
        Array1[i] = new Random().Next(100, 999);
    }
    return Array1;
}

void WriteArray1(int[] Array1)                                              // функция печати массива
{
    Console.WriteLine();
    Console.WriteLine("You have new random array:");
    Console.Write("[");
    for (int i = 0; i < (Array1.Length - 1); i++)
    {
        Console.Write($"{Array1[i]}; ");
    }
    Console.Write($"{Array1[^1]}]");
    Console.WriteLine();
}

int CheckForEvent(int[] Array1)                                             // функия проверки числа на четность и суммирования их (четных) количества
{
    int CountEvent = 0;
    for (int i = 0; i < Array1.Length; i++)
    {
        if ((Array1[i] % 2) == 0)
        {
            CountEvent++;
        }
    }
    return CountEvent;
}



// Задача 36: Задайте одномерный массив, заполненный случайными числами. Найдите сумму элементов, стоящих на нечётных позициях.
// [3, 7, 23, 12] -> 19
// [-4, -6, 89, 6] -> 0

// старт
// формирование массива произвольной размерности от 9 до 15 и заполнеение случайными числами от 1 до 100
// цикл суммирования значений нечетных позиций (i + 2)

int N = new Random().Next(8, 16);                                           // определяем случайный размер массива
Console.WriteLine();
Console.Write($"Определен случайный размер массива (N): {N}");              // от 9 до 15 (крайние значения в случайной выборке не берутся)
int[] Array1 = ReadArray1(N);                                               // функция заполнения массива
WriteArray1(Array1);       

int SumNotEvent = CheckForNotEvent(Array1);                                     // функия проверки числа на четность и суммирования их (четных) количества
Console.WriteLine($"Сумма элементов нечетных позиций массива составляет: {SumNotEvent}");
Console.WriteLine();


// Функции:

int[] ReadArray1(int N)                                                     // функция заполнения массива
{
    int[] Array1 = new int[N];
    for (int i = 0; i < Array1.Length; i++)
    {
        Array1[i] = new Random().Next(0, 100);
    }
    return Array1;
}

void WriteArray1(int[] Array1)                                              // функция печати массива
{
    Console.WriteLine();
    Console.WriteLine("You have new random array:");
    Console.Write("[");
    for (int i = 0; i < (Array1.Length - 1); i++)
    {
        Console.Write($"{Array1[i]}; ");
    }
    Console.Write($"{Array1[^1]}]");
    Console.WriteLine();
}

int CheckForNotEvent(int[] Array1)                                             // функия суммирования чисел в нечетных позициях массива
{
    int SumNotEvent = 0;
    for (int i = 1; i < Array1.Length; i = i+2)
    {
        SumNotEvent = SumNotEvent + Array1[i];
    }
    return SumNotEvent;
}



// Задача 31: Задайте массив из N элементов, заполненный случайными числами из промежутка [-9, 9]. 
// Найдите сумму отрицательных и положительных элементов массива.
// Например, в массиве [3,9,-8,1,0,-7,2,-1,8,-3,-1,6] сумма положительных чисел равна 29, сумма отрицательных равна -20.

int[] CreateArray(int size)  // принимает размер массива и возвращает сгенерированный массив
{
    int[] array = new int[size];
    for (int i = 0; i < size; i++)
        array[i] = new Random().Next(-9, 10);
    return array;
}

void PrintArray(int[] array)
{
    foreach (int el in array)   //этот цикл только для просмотра и тут нет индексов
        Console.Write($"{el} ");
    // for (int i = 0; i < array.Length; i++)
    //     Console.Write($"{array[i]} ");
    Console.WriteLine();
}

int[] FindSums(int[] array)
{

    int SumP = 0;
    int SumN = 0;
    foreach (int el in array)
    {
        if (el > 0) SumP += el; // SumP=SumP+el
        else SumN += el;  // SumN=SumN+el
    }
    int[] results = {SumP, SumN};
    return results;
}

Console.WriteLine("Введите размерность массива");
int size = Convert.ToInt32(Console.ReadLine());
int[] array = CreateArray(size);
PrintArray(array);

int[] sums = FindSums(array);
Console.WriteLine($"Сумма всех положительных элементов равна {sums[0]}");
Console.WriteLine($"Сумма всех отрицательных элементов равна {sums[1]}");



// Задача 38: Задайте массив случайных вещественных чисел. Найдите разницу между максимальным и минимальным элементов массива.

// Старт
// Создание функции для генерации вещественных чисел
// Определение и заполнение произвольного массива
// Функция определения минимального значения в массиве
// Функция определения максимального значения в массиве
// Печать результата - разница между максимальным и минимальным значениями
// конец

Console.WriteLine("Введите размер массива: ");
int ArraySize = Convert.ToInt32(Console.ReadLine());

double [] Array = CreateArray(ArraySize);                           // создание и заполнение массива
PrintArray(Array);                                                  // печать массива
double MinNum = MinNumber(Array);                                   // нахождение минимального числа в массиве
double MaxNum = MaxNumber(Array);                                   // нахождение максимального числа в массиве
double Difference = MaxNum - MinNum;                                // разница чисел - результат задачи
Console.WriteLine();                                                // блок вывода результатов на экран
Console.WriteLine($"Минимальное число данного массива: {MinNum}");
Console.WriteLine();
Console.WriteLine($"Максимальное число данного массива: {MaxNum}");
Console.WriteLine();
Console.WriteLine($"Разница данных чисел составляет: {Difference}");
Console.WriteLine();

// Функции:

double[] CreateArray(int N)                                         // функция создания и заполнения массива
{
    double[] Array = new double[N];
    for (int i = 0; i < Array.Length; i++)
    {
        double r = (double) (i);                                    // спорная строка - написана по какому-то наитию после долгих мук, без нее цикл не работал, написана была практически методом "тыка" используя сообщения в консоли "ПРОБЛЕМЫ", но так как цикл заработал после ее добавления - она и осталась в функции
        Array[i] = (double) (RandomRealNum(r));                     // new Random().Next(0, 100);
        //Console.WriteLine(Array[i]);
    }
    return Array;
}

double RandomRealNum (double r)                                     // функция генерации случайныйх вещественных чисел от -100.000 до - 99.999
{
    Random x = new Random();                                                
    r = Convert.ToDouble(x.Next(-100000, 100000)/1000.0);
    return r;
}

void PrintArray(double[] array)                                     // функция печати массива
{
    Console.WriteLine();
    Console.WriteLine("You have new random array:");
    Console.Write("[");
    for (int i = 0; i < (array.Length - 1); i++)
    {
        Console.Write($"{array[i]}; ");
    }
    Console.Write($"{array[^1]}]");
    Console.WriteLine();
}

double MinNumber(double[] array)                                    // функция нахождения минимального значения в массиве
{
    double MinNum = array[0];
    for (int i = 0; i < (array.Length - 1); i++)
    {
        if (array[i] <= MinNum)
        {
            MinNum = array[i];
        }
    }
    return MinNum;
}

double MaxNumber(double[] array)                                    // функция нахождения минимального значения в массиве
{
    double MaxNum = array[0];
    for (int i = 0; i < (array.Length - 1); i++)
    {
        if (array[i] >= MaxNum)
        {
            MaxNum = array[i];
        }
    }
    return MaxNum;
}



// Задача 31: Задайте массив из N элементов, заполненный случайными числами из промежутка [-9, 9]. 
// Найдите сумму отрицательных и положительных элементов массива.
// Например, в массиве [3,9,-8,1,0,-7,2,-1,8,-3,-1,6] сумма положительных чисел равна 29, сумма отрицательных равна -20.

int[] CreateArray(int size)  // принимает размер массива и возвращает сгенерированный массив
{
    int[] array = new int[size];
    for (int i = 0; i < size; i++)
        array[i] = new Random().Next(-9, 10);
    return array;
}

void PrintArray(int[] array)
{
    foreach (int el in array)   //этот цикл только для просмотра и тут нет индексов
        Console.Write($"{el} ");
    // for (int i = 0; i < array.Length; i++)
    //     Console.Write($"{array[i]} ");
    Console.WriteLine();
}

int[] FindSums(int[] array)
{

    int SumP = 0;
    int SumN = 0;
    foreach (int el in array)
    {
        if (el > 0) SumP += el; // SumP=SumP+el
        else SumN += el;  // SumN=SumN+el
    }
    int[] results = {SumP, SumN};
    return results;
}

Console.WriteLine("Введите размерность массива");
int size = Convert.ToInt32(Console.ReadLine());
int[] array = CreateArray(size);
PrintArray(array);

int[] sums = FindSums(array);
Console.WriteLine($"Сумма всех положительных элементов равна {sums[0]}");
Console.WriteLine($"Сумма всех отрицательных элементов равна {sums[1]}");



// Задача 32: Напишите программу замена элементов массива: положительные элементы замените на 
//соответствующие отрицательные, и наоборот.
// [-4, -8, 8, 2] -> [4, 8, -8, -2] 
Console.WriteLine("Введите размерность массива");
int size = Convert.ToInt32(Console.ReadLine());
int[] array = CreateArray(size);
PrintArray(array);
Revert(array);
PrintArray(array);

void Revert(int[] A)
{
    for (int i = 0; i < A.Length; i++)
        A[i] = -A[i];
   
}

int[] CreateArray(int size)  // принимает размер массива и возвращает сгенерированный массив
{
    int[] array = new int[size];
    for (int i = 0; i < size; i++)
        array[i] = new Random().Next(-9, 10);
    return array;
}

void PrintArray(int[] array)
{
    foreach (int el in array)   //этот цикл только для просмотра и тут нет индексов
        Console.Write($"{el} ");
    // for (int i = 0; i < array.Length; i++)
    //     Console.Write($"{array[i]} ");
    Console.WriteLine();
}



// Задача 33: Задайте массив. Напишите программу, которая определяет, присутствует ли заданное число в массиве. 
// 4; массив [6, 7, 19, 345, 3] -> нет 
// -3; массив [6, 7, 19, 345, 3] -> да 
int[] CreateArray(int size)  // принимает размер массива и возвращает сгенерированный массив 
{ 
    int[] array = new int[size]; 
    for (int i = 0; i < size; i++) 
        array[i] = new Random().Next(-9, 10); 
    return array; 
} 
 
void PrintArray(int[] array) 
{ 
    foreach (int el in array)   //этот цикл только для просмотра и тут нет индексов 
        Console.Write($"{el} "); 
    // for (int i = 0; i < array.Length; i++) 
    //     Console.Write($"{array[i]} "); 
    Console.WriteLine(); 
} 
bool CheckNumberIn(int number, int[] array) 
{ 
    bool find = false; 
    foreach (int el in array) 
    { 
        if (el == number) 
        { 
            find = true; 
            break; 
        } 
    } 
    return find; 
} 
 
Console.Write("Введите размерность массива "); 
int size=Convert.ToInt32 (Console.ReadLine()); 
Console.Write("Введите число "); 
int number=Convert.ToInt32 (Console.ReadLine()); 
int[] maxArray=CreateArray(size); 
PrintArray(maxArray); 
Console.WriteLine(CheckNumberIn(number,maxArray));



// Задача 37: Найдите произведение пар чисел в одномерном массиве. Парой считаем первый и последний элемент, второй и предпоследний и т.д. Результат запишите в новом массиве. 
// [1 2 3 4 5] -> 5 8 3 
// [6 7 3 6] -> 36 21 
int[] CreateArray(int size)  // принимает размер массива и возвращает сгенерированный массив 
{ 
    int[] array = new int[size]; 
    for (int i = 0; i < size; i++) 
        array[i] = new Random().Next(-10, 10); 
    return array; 
} 
 
void PrintArray(int[] array) 
{ 
    foreach (int el in array)   //этот цикл только для просмотра и тут нет индексов 
        Console.Write($"{el} "); 
    // for (int i = 0; i < array.Length; i++) 
    //     Console.Write($"{array[i]} "); 
    Console.WriteLine(); 
} 
 
int[] CreateNewArray(int[] array) 
{ 
    int size = array.Length / 2; 
    if (array.Length % 2 == 1) 
        size = array.Length / 2 + 1; 
    int[] newArray = new int[size]; 
    for (int i = 0; i < size; i++) 
        newArray[i] = array[i] * array[array.Length - i - 1]; //^1 
    if (array.Length % 2 > 0) 
    { 
        newArray[size - 1] = array[array.Length / 2]; // 
    } 
    return newArray; 
} 
 
int size = 5; 
int[] array = CreateArray(size); 
PrintArray(array); 
PrintArray(CreateNewArray(array));



//Задайте одномерный массив из 15 случайных чисел от -100 до 100. Найдите количество элементов массива, значения которых лежат в отрезке [10,99].  
 
int[] CreateArray(int size)  // принимает размер массива и возвращает сгенерированный массив 
{ 
    int[] array = new int[size]; 
    for (int i = 0; i < size; i++) 
        array[i] = new Random().Next(-100, 100); 
    return array; 
} 
 
void PrintArray(int[] array) 
{ 
    foreach (int el in array)   //этот цикл только для просмотра и тут нет индексов 
        Console.Write($"{el} "); 
    // for (int i = 0; i < array.Length; i++) 
    //     Console.Write($"{array[i]} "); 
    Console.WriteLine(); 
} 
int CountNumbers(int[] array) 
{ 
    int count = 0; 
    for (int i = 0; i < array.Length; i++) 
        if (array[i] >= 10 && array[i] < 100) 
            count++; 
    return count; 
} 
 
 
int[] array = CreateArray(15); 
PrintArray(array); 
Console.WriteLine(CountNumbers(array));



// Задача 39: Напишите программу, которая перевернёт одномерный массив (последний элемент будет на первом месте, а первый - на последнем и т.д.)
// [1 2 3 4 5] -> [5 4 3 2 1]
// [6 7 3 6] -> [6 3 7 6]


int[] CreateArray(int size)  // принимает размер массива и возвращает сгенерированный массив
{
    int[] array = new int[size];
    for (int i = 0; i < size; i++)
        array[i] = new Random().Next(-9, 10);
    return array;
}

void PrintArray(int[] array)
{
    foreach (int el in array)   //этот цикл только для просмотра и тут нет индексов
        Console.Write($"{el,2}\t");
    Console.WriteLine();
}

void Reverse(int[] array)
{
    int size = array.Length;
    int temp;
    for (int i = 0; i < size/2; i++)
        // (x,y) = (y,x)
        {
            temp = array[i];
            array[i] = array[size-1-i];
            array[size-1-i] = temp;
        }
        //(array[i] , array[size-1-i]) = (array[size-1-i] , array[i]);
}

Console.WriteLine("Введите размерность массива");
int size = Convert.ToInt32(Console.ReadLine());
int[] array = CreateArray(size);
PrintArray(array);
Reverse(array);
PrintArray(array);



//задача 42 Напишите программу, которая будет преобразовывать десятичное число в двоичное. 
 
Console.WriteLine("Введите число"); 
int num = Convert.ToInt32(Console.ReadLine()); 
FromTen(num); 
 
void FromTen(int num) 
{ 
    string count = ""; 
    while (num > 1) 
    { 
        count = Convert.ToString(num % 2) + count; 
        num = num / 2; 
    } 
    count = 1 + count; 
    Console.WriteLine(count); 
}



// задача 2 HARD необязательная. Сгенерировать массив случайных целых чисел размерностью m*n 
//(размерность вводим с клавиатуры). Вывести на экран красивенько таблицей. Найти минимальное 
//число и его индекс, найти максимальное число и его индекс. Вывести эту информацию на экран.

// функция генерации двухмерного массива через цикл - начиная с первой сточки заполняем каждый столбец и так до последней строчки
// функция вывода на печать сгенерированного массива
// функция поиска максимального значения через цикл аналогичный генерации массива
// функция поиска минимального значения через цикл аналогичный генерации массива
// вывод на экран результатов

int M = new Random().Next(3, 7);                                           
int N = new Random().Next(2, 6);   
Console.WriteLine();
Console.WriteLine($"Определен случайный размер массива: {M} X {N}");
Console.WriteLine();              
int[,] Array = CreateArray(M, N);                                               
PrintArray(Array, M, N);
Console.WriteLine(); 
int MinNumber = FindMinNumber(Array);
int MinIndexM = FindMinNumberInM(Array);
int MinIndexN = FindMinNumberInN(Array);       
Console.WriteLine($"Минимальный элемент массива: {MinNumber}, его индекс [{MinIndexM}, {MinIndexN}]");
int MaxNumber = FindMaxNumber(Array);
int MaxIndexM = FindMaxNumberInM(Array);
int MaxIndexN = FindMaxNumberInN(Array);       
Console.WriteLine($"Максимальный элемент массива: {MaxNumber}, его индекс [{MaxIndexM}, {MaxIndexN}]");

// Функции:

int[,] CreateArray(int M, int N)                                                   
{
    int[,] Array = new int[N,M];
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            Array [i,j] = new Random().Next(1, 999);
        }
    }
    return Array;
}

void PrintArray(int[,] Array, int M, int N)
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            Console.Write($"{Array[i,j]}\t");
        }
        Console.WriteLine();
    }
}

int FindMinNumber(int[,] Array)                                                   
{
    int MinNumber = Array[0,0];
    int MinIndexM = 0;
    int MinIndexN = 0;
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            if (Array[i,j] < MinNumber)
            {
                MinNumber = Array[i,j];
                MinIndexM = i;
                MinIndexN = j;
            }
        }
    }
    return MinNumber;
}

int FindMinNumberInM(int[,] Array)                                                   
{
    int MinNumber = Array[0,0];
    int MinIndexM = 0;
    int MinIndexN = 0;
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            if (Array[i,j] < MinNumber)
            {
                MinNumber = Array[i,j];
                MinIndexM = i;
                MinIndexN = j;
            }
        }
    }
    return MinIndexM;
}

int FindMinNumberInN(int[,] Array)                                                   
{
    int MinNumber = Array[0,0];
    int MinIndexM = 0;
    int MinIndexN = 0;
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            if (Array[i,j] < MinNumber)
            {
                MinNumber = Array[i,j];
                MinIndexM = i;
                MinIndexN = j;
            }
        }
    }
    return MinIndexN;
}

int FindMaxNumber(int[,] Array)                                                   
{
    int MaxNumber = Array[0,0];
    int MaxIndexM = 0;
    int MaxIndexN = 0;
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            if (Array[i,j] > MaxNumber)
            {
                MaxNumber = Array[i,j];
                MaxIndexM = i;
                MaxIndexN = j;
            }
        }
    }
    return MaxNumber;
}

int FindMaxNumberInM(int[,] Array)                                                   
{
    int MaxNumber = Array[0,0];
    int MaxIndexM = 0;
    int MaxIndexN = 0;
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            if (Array[i,j] > MaxNumber)
            {
                MaxNumber = Array[i,j];
                MaxIndexM = i;
                MaxIndexN = j;
            }
        }
    }
    return MinIndexM;
}

int FindMaxNumberInN(int[,] Array)                                                   
{
    int MaxNumber = Array[0,0];
    int MaxIndexM = 0;
    int MaxIndexN = 0;
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            if (Array[i,j] > MaxNumber)
            {
                MaxNumber = Array[i,j];
                MaxIndexM = i;
                MaxIndexN = j;
            }
        }
    }
    return MaxIndexN;
}

